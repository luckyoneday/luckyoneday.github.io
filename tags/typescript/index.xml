<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on xuyou&#39;s blog</title>
    <link>https://luckyoneday.github.io/tags/typescript/</link>
    <description>Recent content in TypeScript on xuyou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jul 2023 15:12:20 +0800</lastBuildDate><atom:link href="https://luckyoneday.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescript 条件类型和 infer</title>
      <link>https://luckyoneday.github.io/daily/60-typescript-infer/</link>
      <pubDate>Wed, 12 Jul 2023 15:12:20 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/60-typescript-infer/</guid>
      <description>推荐一个学习 typescript 的网站： https://www.typescript-training.com/ 再推荐一个 ts-challenges 条件类型 举个🌰： 1 2 3 4 5 6 7 8 9 type Diff&amp;lt;T, U&amp;gt; = T extends U ? never : T; // 移除 T 中可以赋值给 U 的类型 type Filter&amp;lt;T, U&amp;gt; = T extends U ? T :</description>
    </item>
    
    <item>
      <title>TypeScript映射类型</title>
      <link>https://luckyoneday.github.io/daily/54-typescript-mapped-types/</link>
      <pubDate>Wed, 09 Nov 2022 12:36:44 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/54-typescript-mapped-types/</guid>
      <description>映射类型( Mapped types )允许我们从现有类型中创建新的类型。例如结合索引类型，将一个类型的所有属性设置为 boolean： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type</description>
    </item>
    
    <item>
      <title>Typescript Tip</title>
      <link>https://luckyoneday.github.io/daily/48-typescript-tips/</link>
      <pubDate>Wed, 11 Aug 2021 20:41:52 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/48-typescript-tips/</guid>
      <description>keyof typeof 是什么意思 keyof 作用于 object 类型，并返回这个 object 的 key 的集合类型： 1 2 type Point = { x: number; y: number }; type P = keyof Point; // type &amp;#39;&amp;#34;x&amp;#34; | &amp;#34;y&amp;#34;&amp;#39; typeof 操作符作用于 JavaScript 对象和作用于 TypeScript 类型的时候</description>
    </item>
    
    <item>
      <title>TypeScript索引类型</title>
      <link>https://luckyoneday.github.io/daily/29-typescript-index-types/</link>
      <pubDate>Mon, 15 Jun 2020 20:32:14 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/29-typescript-index-types/</guid>
      <description>一般来说我们可以使用联合类型来代表几种类型，如下： 1 const value: string | number; 字符串字面量类型也是一种联合类型。一个字符串字面量只能被赋值给特定的字符串值。</description>
    </item>
    
    <item>
      <title>TypeScript泛型</title>
      <link>https://luckyoneday.github.io/daily/28-typescript-generics/</link>
      <pubDate>Sun, 14 Jun 2020 21:07:54 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/28-typescript-generics/</guid>
      <description>可以使用泛型来创建高可用的类、类型、接口和函数。 最经典的来自官方文档的例子： 1 2 3 function identity(argument: number): number { return argument; } 上面的函数返回我们传递给它的参数。 不幸的是</description>
    </item>
    
  </channel>
</rss>
