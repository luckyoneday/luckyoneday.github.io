<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小笔记 on xuyou&#39;s blog</title>
    <link>https://luckyoneday.github.io/daily/</link>
    <description>Recent content in 小笔记 on xuyou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 May 2021 16:32:34 +0800</lastBuildDate><atom:link href="https://luckyoneday.github.io/daily/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>github action</title>
      <link>https://luckyoneday.github.io/daily/44-github-action/</link>
      <pubDate>Mon, 03 May 2021 16:32:34 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/44-github-action/</guid>
      <description>之前博客发布是使用本地运行 deploy.sh 的方式，脚本可见 deploy.sh，这种方式每次发布都重新生成 public 文件夹，需要重新进行 git 初始化操作，导致远端 github 仓库</description>
    </item>
    
    <item>
      <title>孤梦</title>
      <link>https://luckyoneday.github.io/daily/43-lyric-dream/</link>
      <pubDate>Fri, 05 Mar 2021 12:17:43 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/43-lyric-dream/</guid>
      <description>昨夜东风把心吹落到空城 落入凡尘细无声 几轮指纹刻下年轮的虔诚 用情太深不可争 放不下所有的回忆都像一场孤梦 江湖几番沉沦枉为余生 是否辜负几人才会让梦</description>
    </item>
    
    <item>
      <title>Electron Q&amp;A</title>
      <link>https://luckyoneday.github.io/daily/42-electron-qa/</link>
      <pubDate>Thu, 04 Feb 2021 15:24:54 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/42-electron-qa/</guid>
      <description>loadURL 和 loadFile 的区别 loadURL 可以加载线上的资源地址和本地的资源，但是 loadFile 只能加载本地的文件地址。 怎么创建无边框窗口？ 无边框窗口是不带外壳（包括窗口边框、工具</description>
    </item>
    
    <item>
      <title>Performance Api （下）</title>
      <link>https://luckyoneday.github.io/daily/40-performance-api/</link>
      <pubDate>Sat, 30 Jan 2021 20:17:53 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/40-performance-api/</guid>
      <description>上篇指路 其他类目分析 Navigation 导航用于深入了解构建网页的关键步骤。 访问导航数据的方法是： performance.getEntriesByType(&amp;</description>
    </item>
    
    <item>
      <title>Performance Api （上）</title>
      <link>https://luckyoneday.github.io/daily/39-performance-api/</link>
      <pubDate>Wed, 27 Jan 2021 10:17:53 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/39-performance-api/</guid>
      <description>Performance API 可以帮助我们全面了解我们的网页，我们可以通过 Performance API 站点获取不同的浏览器，网络中的运行情况数据。 Performance API 是 High Resolution Time API(高分辨率时间) 的一部分，</description>
    </item>
    
    <item>
      <title>Git 操作 tips</title>
      <link>https://luckyoneday.github.io/daily/37-git-notes/</link>
      <pubDate>Sun, 30 Aug 2020 20:49:58 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/37-git-notes/</guid>
      <description>下载大项目时超时 具体报错： 1 2 3 4 5 6 remote: Counting objects: 66352, done. remote: Compressing objects: 100% (10417/10417), done. error: RPC failed; curl 18 transfer closed with outstanding read data remaining fatal: The remote end hung up unexpectedly fatal: early EOF fatal: index-pack failed 解决方法： 1 2 3 $ git clone http://github.com/large-repository --depth 1 $</description>
    </item>
    
    <item>
      <title>codeceptjs Hook</title>
      <link>https://luckyoneday.github.io/daily/35-codeceptjs-hook/</link>
      <pubDate>Wed, 19 Aug 2020 16:46:37 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/35-codeceptjs-hook/</guid>
      <description>背景是在接 e2e 的时候先对所有接口进行了 request header 的复写（为了绕过风控），codeceptjs 的 helper 里面可以拿到 puppeteer，就可以使用 puppeteer 的 page 来操</description>
    </item>
    
    <item>
      <title>一</title>
      <link>https://luckyoneday.github.io/daily/33-lyric-one/</link>
      <pubDate>Sun, 16 Aug 2020 19:36:07 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/33-lyric-one/</guid>
      <description>习惯梦到你来不算 看我形只影单 何年何月才能遇见 把一梦刻成双剑 万千般飘摇 一把桃花伞 等我天涯海角走遍 此时此刻我来许愿 把一生存成思念 一曲惊天人 一琴一</description>
    </item>
    
    <item>
      <title>介绍 codeceptjs</title>
      <link>https://luckyoneday.github.io/daily/32-introduce-codecept/</link>
      <pubDate>Fri, 07 Aug 2020 17:27:18 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/32-introduce-codecept/</guid>
      <description>为什么选用 codeceptjs BDD 测试： https://codecept.io/bdd/#what-is-behavior-driven-development 可以和 cucumber 结合： https://www.youtube.com/watch?v=mIasShmyw9I 可以选各种测试 helper： https://codecept.io/basics/#architecture 可以测试 mobile： https://codecept.io/mobile/#mobile-testing-with-appium 可以跨浏览器： https://help.crossbrowsertesting.com/selenium-testing/frameworks/codeceptjs/ 还有各种插件： https://codecept.io/plugins/#pauseonfail 方便的定位 loc</description>
    </item>
    
    <item>
      <title>起风了</title>
      <link>https://luckyoneday.github.io/daily/31-lyric-start-wind/</link>
      <pubDate>Mon, 27 Jul 2020 11:20:19 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/31-lyric-start-wind/</guid>
      <description>我曾将青春翻涌成她 也曾指尖弹出盛夏 心之所动 且就随缘去吧 这一路上走走停停 顺着少年漂流的痕迹 迈出车站的前一刻 竟有些犹豫 不禁笑这近乡情怯 仍无可避免</description>
    </item>
    
    <item>
      <title>介绍 cucumber</title>
      <link>https://luckyoneday.github.io/daily/30-introduce-cucumber/</link>
      <pubDate>Fri, 10 Jul 2020 17:24:14 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/30-introduce-cucumber/</guid>
      <description>关于 BDD BDD 是 Behaviour Driven Development / 行为驱动开发，是一种软件开发流程。是通过自然语言定义系统行为，以功能使用者的角度，编写需求场景，且这些行为描述可以直接形成</description>
    </item>
    
    <item>
      <title>TypeScript索引类型</title>
      <link>https://luckyoneday.github.io/daily/29-typescript-index-types/</link>
      <pubDate>Mon, 15 Jun 2020 20:32:14 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/29-typescript-index-types/</guid>
      <description>一般来说我们可以使用联合类型来代表几种类型，如下： 1 const value: string | number; 字符串字面量类型也是一种联合类型。一个字符串字面量只能被赋值给特定的字符串值。</description>
    </item>
    
    <item>
      <title>TypeScript泛型</title>
      <link>https://luckyoneday.github.io/daily/28-typescript-generics/</link>
      <pubDate>Sun, 14 Jun 2020 21:07:54 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/28-typescript-generics/</guid>
      <description>可以使用泛型来创建高可用的类、类型、接口和函数。 最经典的来自官方文档的例子： 1 2 3 function identity(argument: number): number { return argument; } 上面的函数返回我们传递给它的参数。 不幸的是</description>
    </item>
    
    <item>
      <title>HashRouter vs BrowserRouter</title>
      <link>https://luckyoneday.github.io/daily/27-hashrouter-vs-browserrouter/</link>
      <pubDate>Thu, 11 Jun 2020 21:43:56 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/27-hashrouter-vs-browserrouter/</guid>
      <description>HashRouter 当渲染一个新路由时，使用哈希 routes 更新浏览器 URL (/#/about) 哈希不会被服务端处理，服务端只会匹配到 /，并且忽视后面的哈希值，所以会对所有路由请求返回 ind</description>
    </item>
    
    <item>
      <title>E2E测试中常报的错误汇总</title>
      <link>https://luckyoneday.github.io/daily/26-e2e-test-errors/</link>
      <pubDate>Wed, 10 Jun 2020 10:47:22 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/26-e2e-test-errors/</guid>
      <description>希望可以做成一个汇总贴，保持更新啊~ 超时 1 Timeout - Async callback was not invoked within the 20000ms timeout specified by jest.setTimeout.Timeout 这个原因是超时啦！比如在等倒计时或者是等验证码的时候，超出了 timeout 时间就会</description>
    </item>
    
    <item>
      <title>Xpath的文本匹配</title>
      <link>https://luckyoneday.github.io/daily/25-xpath-text/</link>
      <pubDate>Tue, 09 Jun 2020 21:22:01 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/25-xpath-text/</guid>
      <description>ummmm 确实很久没有更新过小笔记了&amp;hellip; 最近接触了一些新的东西，比如 sketch 插件比如 e2e 测试，可能接下来会穿插着这两项的小知识点记一下小笔记~ 今</description>
    </item>
    
    <item>
      <title>关于监听事件</title>
      <link>https://luckyoneday.github.io/daily/24-about-event/</link>
      <pubDate>Sun, 29 Mar 2020 14:53:32 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/24-about-event/</guid>
      <description>今天解决了一个画板独立的 bug，具体表现为当切换了画板的 tab 时，触发 wheel 事件会导致所有画布一起缩放。 后来查看 console 中的 eventListener 发现切换一个 tab 就会在 window 上添加</description>
    </item>
    
    <item>
      <title>千年一声唱</title>
      <link>https://luckyoneday.github.io/daily/23-lyric-thousand-year/</link>
      <pubDate>Sun, 26 Jan 2020 21:21:51 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/23-lyric-thousand-year/</guid>
      <description>新丰美酒斗十千 咸阳游侠多少年 相逢意气为君饮 系马高楼垂柳边 一弯秋月好酒量 一把寒剑洗秋霜 一缕春雨随风入 一树烟柳碧玉妆 落音诗酒之间 穿过一字一句和你</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://luckyoneday.github.io/daily/22-math/</link>
      <pubDate>Fri, 10 Jan 2020 11:46:17 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/22-math/</guid>
      <description>Math.hypot() 返回它的所有参数的平方和的平方根。 1 2 3 4 5 6 Math.hypot(9); // 9 等同于 Math.hypot(-9) 等同于Math.abs(x) Math.hypot(3, 4); // 5 等同于 Math.sqrt(3*3 + 4*4) Math.hypot(); // 0 不传入参数则返回 0 Math.hypot(NaN); // NaN</description>
    </item>
    
    <item>
      <title>这是一篇翻译</title>
      <link>https://luckyoneday.github.io/daily/21-translation-1/</link>
      <pubDate>Sat, 04 Jan 2020 11:33:06 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/21-translation-1/</guid>
      <description>是因为我在数组的 map 中使用了 hooks 触发了 eslint 检查，然后蓝教授扔了这篇文章给我。 太长不看版：有 hooks 的函数组件使用 JSX 或者React.createEleme</description>
    </item>
    
    <item>
      <title>Touch Event</title>
      <link>https://luckyoneday.github.io/daily/20-touch-event/</link>
      <pubDate>Sun, 22 Dec 2019 10:19:17 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/20-touch-event/</guid>
      <description>TouchEvent是一类描述手指在触摸屏面（触摸屏、触摸板）等状态变化的事件。属于一种UIEvent。该事件可以描述与屏幕的一个或多个触点</description>
    </item>
    
    <item>
      <title>丹歌惊鸿</title>
      <link>https://luckyoneday.github.io/daily/19-lyric-wangye/</link>
      <pubDate>Sat, 21 Dec 2019 15:23:45 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/19-lyric-wangye/</guid>
      <description>算不得北京城里的爷 山里偷得 半日的闲 搁这儿遛弯儿的人别扰着 您都请便 半不邋遢 小道名也 胸无大志 爱咧咧 少来打听那有的没的 翻你个底儿掉掀朝天 顺天下势 理</description>
    </item>
    
    <item>
      <title>鼠标为中心缩放的简单实现</title>
      <link>https://luckyoneday.github.io/daily/18-scale/</link>
      <pubDate>Fri, 20 Dec 2019 21:52:47 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/18-scale/</guid>
      <description>最终效果: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // ... useEffect(() =&amp;gt; { const handleScale = (e) =&amp;gt; { // 这里用到了阻止默认</description>
    </item>
    
    <item>
      <title>拖拽的简单实现</title>
      <link>https://luckyoneday.github.io/daily/17-drag/</link>
      <pubDate>Thu, 19 Dec 2019 13:38:10 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/17-drag/</guid>
      <description>最终效果: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 useEffect(() =&amp;gt; { // 处理移动之类的 const handleMove = (e) =&amp;gt; { const left = nodePosRef.current.x; const top = nodePosRef.current.y; const</description>
    </item>
    
    <item>
      <title>随滚轮滚动的简单实现</title>
      <link>https://luckyoneday.github.io/daily/16-scroll/</link>
      <pubDate>Wed, 18 Dec 2019 15:03:24 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/16-scroll/</guid>
      <description>#root { width: 100%; height: 240px; border: 2px solid #f1f1f1; } .wrapper { width: 100%; height: 100%; } .inner { position: absolute; z-index: 10; width: 100px; height: 100px; transform-origin: 0 0; background: #1199ee; } 效果见蓝色方块。（移动端不支持） 这里就要用到之前提到过的wheelEve</description>
    </item>
    
    <item>
      <title>Wheel Event</title>
      <link>https://luckyoneday.github.io/daily/15-wheel-event/</link>
      <pubDate>Tue, 17 Dec 2019 17:21:52 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/15-wheel-event/</guid>
      <description>和scroll不同的是，scroll是监听页面或元素滚动，wheel是监听滚轮滚动。wheelEvent的默认操作是基于浏览器具体实现的，而</description>
    </item>
    
    <item>
      <title>debounce &#43; throttle</title>
      <link>https://luckyoneday.github.io/daily/14-debounce-throttle/</link>
      <pubDate>Mon, 16 Dec 2019 08:26:48 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/14-debounce-throttle/</guid>
      <description>真的是每次用的时候都需要查，一直分不清&amp;hellip;尴尬的一批 防抖 debounce 在事件触发 ms 之后再执行，在 ms 时间内随意触发事件，都会在这个时间内将之前</description>
    </item>
    
    <item>
      <title>是风动</title>
      <link>https://luckyoneday.github.io/daily/13-lyric-wind/</link>
      <pubDate>Thu, 12 Dec 2019 20:55:36 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/13-lyric-wind/</guid>
      <description>若非万种飞烟都过眼 怎会迷恋巫山的那一片 若非海枯石烂相看两相厌 怎又会弱水涨桑田 以为衔泥归来旧堂前 是我似曾相识的那一面 以为积雪成川有孤鸿不知疲倦</description>
    </item>
    
    <item>
      <title>css in js</title>
      <link>https://luckyoneday.github.io/daily/12-css-in-js/</link>
      <pubDate>Tue, 10 Dec 2019 23:48:44 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/12-css-in-js/</guid>
      <description>难不成是因为天下大势，分久必合，合久必分？ 传统前端推崇的“关注点分离”原则，推荐将 HTML、CSS、JavaScript 分离，各司其职。但是</description>
    </item>
    
    <item>
      <title>记录下各种 path</title>
      <link>https://luckyoneday.github.io/daily/11-path/</link>
      <pubDate>Mon, 09 Dec 2019 08:43:03 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/11-path/</guid>
      <description>// 本来是想写服务端渲染热更新 &amp;ndash; server 端，emmmmm 没配置好，换个话题 😂 总是看别人的代码里面有这样的写法path.resolve(__dirna</description>
    </item>
    
    <item>
      <title>服务端渲染热更新</title>
      <link>https://luckyoneday.github.io/daily/10-ssr-4/</link>
      <pubDate>Sun, 08 Dec 2019 08:37:33 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/10-ssr-4/</guid>
      <description>之前每次都是先npm run build然后npm start，这个过程真的是漫长且难受！于是就想着还是查下资料看怎么接热更新！ client 用到了react-h</description>
    </item>
    
    <item>
      <title>服务端渲染添加样式</title>
      <link>https://luckyoneday.github.io/daily/9-ssr-3/</link>
      <pubDate>Sat, 07 Dec 2019 15:29:24 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/9-ssr-3/</guid>
      <description>客户端打包用mini-css-extract-plugin将 antd.css 抽出来作为单独的 css 文件，在 HTML 文件中引入；将 *.module.scss 用ignore-loader ignore 掉不</description>
    </item>
    
    <item>
      <title>服务端渲染路由同构</title>
      <link>https://luckyoneday.github.io/daily/8-ssr-2/</link>
      <pubDate>Fri, 06 Dec 2019 14:20:21 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/8-ssr-2/</guid>
      <description>由于服务端都是无状态的，所以服务端渲染与浏览器端是不一样的，基本就是用无状态的&amp;lt;StaticRouter&amp;gt;代替浏览器端的&amp;lt;</description>
    </item>
    
    <item>
      <title>从你的名字开始</title>
      <link>https://luckyoneday.github.io/daily/7-lyric-since-your-name/</link>
      <pubDate>Thu, 05 Dec 2019 11:08:11 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/7-lyric-since-your-name/</guid>
      <description>想来 有份悬而未决难言的心事 总该亲口告予你 因你 有了劈山拦海的勇气 衔石救浪后尚承余力 我是 苍茫碧海中心孤独的岛屿 藤草爬满手臂 某日你 乍一眼闯入荒芜领</description>
    </item>
    
    <item>
      <title>关于服务端渲染</title>
      <link>https://luckyoneday.github.io/daily/6-ssr-1/</link>
      <pubDate>Wed, 04 Dec 2019 10:51:12 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/6-ssr-1/</guid>
      <description>本地打包完的 server.bundle.js 运行时，浏览器拿到的 js 文件返回也是个 HTML 很绝望，还报了Unexpected token &amp;lt;的错误，js 文件返回的开头竟然是&amp;lt;!D</description>
    </item>
    
    <item>
      <title>关于 useLayoutEffect 和 useEffect 的区别</title>
      <link>https://luckyoneday.github.io/daily/5-react-hooks/</link>
      <pubDate>Mon, 02 Dec 2019 08:04:31 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/5-react-hooks/</guid>
      <description>首先看下官网对 useLayoutEffect 的解释。 作用其实和useEffect差不多，只是useLayoutEffect是在 DOM 变化后同步触发的（与componentD</description>
    </item>
    
    <item>
      <title>deploy.sh</title>
      <link>https://luckyoneday.github.io/daily/4-deploy/</link>
      <pubDate>Sun, 01 Dec 2019 12:03:17 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/4-deploy/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #!/bin/bash # 部署到 github pages 脚本 # 错误</description>
    </item>
    
    <item>
      <title>为什么 setState 是异步的</title>
      <link>https://luckyoneday.github.io/daily/3-async-setstate/</link>
      <pubDate>Sat, 30 Nov 2019 21:46:01 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/3-async-setstate/</guid>
      <description>原 issue 地址: https://github.com/facebook/react/issues/11527#issuecomment-360199710 首先需要承认延迟 reconciliation 来批量更新对性能优化是有益的，从这点来看，setState同步更新在很多 case 下效率不高，批量更新是更好的选择。 比</description>
    </item>
    
    <item>
      <title>关于登录状态</title>
      <link>https://luckyoneday.github.io/daily/2-koa-session/</link>
      <pubDate>Fri, 29 Nov 2019 13:36:19 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/2-koa-session/</guid>
      <description>没有使用 jwt 鉴权，因为 cookie 有大小限制，就总觉得少存一些东西比较好，而且对「退出登录」怎么处理 jwt 没有搞清楚，前端可能是清除 cookie，那后端怎么</description>
    </item>
    
    <item>
      <title>余年</title>
      <link>https://luckyoneday.github.io/daily/1-lyric-left-year/</link>
      <pubDate>Wed, 27 Nov 2019 17:49:41 +0800</pubDate>
      
      <guid>https://luckyoneday.github.io/daily/1-lyric-left-year/</guid>
      <description>时光在岁月长河里 不停地轮回 记忆在前世今生里 不停地交汇 漫漫星河醉 转眼间春去秋来 雁儿已南飞 谁又能舍下和你 这一生相随 在梦里转了千百回 看落花无言 流离</description>
    </item>
    
  </channel>
</rss>
